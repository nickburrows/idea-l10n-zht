inspection.extension.class.should.not.be.open.text=扩展类不应为 open
inspection.light.service.must.not.be.open.message=轻量服务不能为开放
inspections.companion.object.in.extension=扩展中的伴生对象
inspections.companion.object.in.extension.message=Companion objects in IDE extension implementations may only contain a logger and constants
inspections.create.object.and.move.prohibited.declarations.fix.text=创建对象并移动禁止的声明
inspections.forbidden.method.in.suspend.context=禁止在 suspend 上下文方法中使用
inspections.forbidden.method.in.suspend.context.check.canceled.fix.text=将 'ProgressManager.checkCanceled' 替换为协同程序友好的 'checkCancelled'
inspections.forbidden.method.in.suspend.context.check.canceled.text=不在 suspend 上下文中调用 'ProgressManager.checkCanceled'。使用顶层 'checkCancelled' 函数
inspections.forbidden.method.in.suspend.context.default.modality.state.text='defaultModalityState()' 在 suspend 上下文中不起作用。如果确实有必要，请使用 'contextModality()'
inspections.forbidden.method.in.suspend.context.invoke.and.wait.fix.text=将 'invokeAndWait' 调用替换为 'withContext(Dispatchers.EDT) {}'
inspections.forbidden.method.in.suspend.context.invoke.and.wait.text='invokeAndWait' 可能会阻塞当前协同程序。请改用 'Dispatchers.EDT'
inspections.forbidden.method.in.suspend.context.invoke.later.fix.launch.text=将 'invokeLater' 替换为 'launch(Dispatchers.EDT)'
inspections.forbidden.method.in.suspend.context.invoke.later.fix.with.context.text=(可能会改变语义)将 'invokeLater' 调用替换为 'withContext(Dispatchers.EDT) {}'
inspections.forbidden.method.in.suspend.context.invoke.later.text='invokeLater' 在 suspend 上下文中非惯用。请改用 'Dispatchers.EDT'
inspections.forbidden.method.in.suspend.context.navigate.to.suspend.context=导航到 suspend 上下文
inspections.forbidden.method.in.suspend.context.text=使用 @RequiresBlockingContext 注解的方法 ''{0}''。它不是为在 suspend 函数中调用而设计的
inspections.plugin.extension.registers.kotlin.object=扩展类为 Kotlin 对象
inspections.plugin.kotlin.object.registered.as.extension=注册为扩展的 Kotlin 对象