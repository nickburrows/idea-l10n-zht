action.Gradle.ExecuteTask.text=执行 Gradle 任务
action.Gradle.ImportExternalProject.description=链接此文件描述的 Gradle 项目
action.Gradle.ImportExternalProject.text=链接 Gradle 项目
action.Gradle.OpenProjectCompositeConfiguration.text=复合构建配置
action.Gradle.ToggleOfflineAction.description=切换 Gradle 构建的脱机模式
action.Gradle.ToggleOfflineAction.text=切换脱机模式
column.name.daemon.PID=PID
column.name.daemon.info=信息
column.name.daemon.status=状态
column.name.daemon.timestamp=时间戳
compiler.build.messages.gradle.configuration.not.found=无法生成 ''{0}''。\n\
找不到相关的 gradle 配置。请重新导入 Gradle 项目，然后重试。
daemons.started.by.are.displayed=显示由 {0} (或类似配置的其他守护程序)启动的守护程序。<i>支持 3.0 或更高版本。<i>
grable.execution.name.upgrade.wrapper=升级 Gradle 包装器
gradle.action.download.sources=下载源代码
gradle.action.download.sources.busy.text=正在下载源…
gradle.action.refresh.dependencies.description=使用 --refresh-dependencie 实参刷新 Gradle 缓存中的依赖项
gradle.action.refresh.dependencies.text=刷新 Gradle 依赖项
gradle.build.issue.gradle.jvm.unsupported.description={0} 不支持在早于 {1} 的 Gradle JVM 版本上执行 Gradle
gradle.build.quick.fix.gradle.jvm=Use Java {0} as Gradle JVM: <a href="{1}">Open Gradle settings</a>
gradle.build.quick.fix.title=可能的解决方案:
gradle.codeInsight.action.add_maven_dependency.description=向项目中添加所选 Maven 工件依赖项
gradle.codeInsight.action.add_maven_dependency.text=添加 Maven 工件依赖项
gradle.codeInsight.action.apply_plugin.description=向项目中添加所选 Gradle 插件
gradle.codeInsight.action.apply_plugin.popup.title=选择插件
gradle.codeInsight.action.apply_plugin.text=添加 Gradle 插件
gradle.codeInsigt.buildscript.classpath.description=此脚本类路径配置用于编译和执行构建脚本。此类路径还用于加载构建脚本使用的插件。
gradle.command.line.parse.error.invalid.arguments=<b>命令行实参无法解析</b>
gradle.commandline.description=在给定文件夹下配置 Gradle 项目
gradle.daemons.close=关闭
gradle.daemons.description.title=描述
gradle.daemons.gradle.daemons=Gradle 守护进程
gradle.daemons.gradle.daemons.show=显示 Gradle 守护进程
gradle.daemons.refresh=刷新
gradle.daemons.show.stopped=显示已停止
gradle.daemons.stop.all=全部停止
gradle.daemons.stop.selected=停止所选项
gradle.dependency.analyzer.loading=加载 Gradle 依赖项
gradle.dsl.artifactid.is.null=ArtifactId 为 null
gradle.dsl.groupid.is.null=GroupId 为 null
gradle.dsl.model.fail.to.build=无法为模块 {0} 构建 Gradle 模型
gradle.dsl.new.project.wizard=Gradle DSL:
gradle.dsl.new.project.wizard.groovy=Groovy
gradle.dsl.new.project.wizard.kotlin=Kotlin
gradle.dsl.scope.is.null=配置为 null
gradle.dsl.version.is.null=版本为 null
gradle.execution.name.build.project.=构建 {0}
gradle.filetype.description=Groovy Gradle DSL 配置
gradle.filetype.display.name=Groovy Gradle DSL
gradle.home.setting.type.explicit.empty=未指定 Gradle 位置
gradle.home.setting.type.explicit.incorrect=Gradle 位置不正确。\n\
位置: {0}
gradle.incorrect.jvm.issue.title=Gradle JVM 选项不正确
gradle.incorrect.jvm.wsl.issue.description=项目位于 WSL({0} - ''{1}'') 上。\n\
使用安装在同一 WSL 分发版上的 JDK。
gradle.incorrect.jvm.wslJdk.on.win.issue.description=该项目位于 Windows 系统中。\n\
使用 Windows 系统中安装的 JDK。
gradle.integrations.maven.notification.detection=无索引的 Maven 仓库 Gradle 检测
gradle.integrations.maven.notification.disable.text=禁用通知
gradle.integrations.maven.notification.not_updated_repository.text=<a href="#update">更新索引</a>以补全依赖关系或<a href="#disable">禁用</a>此通知
gradle.integrations.maven.notification.not_updated_repository.title=<b>找到无索引的远程 Maven 仓库</b>
gradle.integrations.maven.notification.to.be.disabled=将对所有项目禁用通知。\n\
\n\
使用“设置 | 外观与行为 | 通知 | {0}”可以配置通知。
gradle.jvm.has.been.resolved=Gradle JVM 已解析
gradle.jvm.incorrect=Gradle JVM 选项不正确:\n\
路径: {0}
gradle.jvm.is.being.resolved=正在解析 Gradle JVM…
gradle.jvm.is.being.resolved.error=正在解析 Gradle JVM，请稍候。
gradle.jvm.is.invalid=找到无效的 Gradle JDK 配置。
gradle.jvm.is.jre=请为 Gradle 导入程序使用 JDK，不使用 JRE。
gradle.jvm.undefined=请设置 Gradle JVM 选项
gradle.name=Gradle
gradle.notifications.java.home.change.content=“{0}”已设置为 {1} <br/> {2}
gradle.notifications.java.home.change.title=Gradle JVM 已配置
gradle.notifications.java.home.invalid.title=找到无效的 Gradle JVM 配置
gradle.notifications.java.home.property.content=请修正 {0} 中的 <i>org.gradle.java.home</i>。
gradle.notifications.java.home.unsupported.content=JDK {0} 与 Gradle {1} 不兼容。
gradle.notifications.java.home.variable.content=请修正 <i>JAVA_HOME</i> 环境变量。
gradle.notifications.sources.download.failed.content=<html>未下载源: {0}</html>
gradle.notifications.sources.download.failed.title=源下载失败
gradle.open.gradle.settings=打开 Gradle 设置
gradle.project.0=Gradle 项目 ''{0}''
gradle.project.generation.wrapper.progress.title=正在生成 Gradle 包装器
gradle.project.resolver.orphan.modules.error.description=找不到以下{0,choice,1#模块|1<模块}: {1}\n\
这可能是 Gradle 版本低于 3.3 的 *.gradle 脚本中的复合构建配置所致。\n\
尝试 Gradle 3.3 或更高版本，或启用 ''{2}'' 选项
gradle.project.resolver.orphan.modules.error.title=Gradle 项目结构问题
gradle.project.settings.distribution=分发:
gradle.project.settings.distribution.bundled=已捆绑
gradle.project.settings.distribution.group=Gradle 源
gradle.project.settings.distribution.invalid=Gradle SDK 安装无效
gradle.project.settings.distribution.local=本地安装
gradle.project.settings.distribution.local.location=位置:
gradle.project.settings.distribution.local.location.dialog=选择 Gradle 安装
gradle.project.settings.distribution.local.location.empty.state=本地 Gradle 的路径
gradle.project.settings.distribution.local.location.npw=Gradle 位置:
gradle.project.settings.distribution.npw=Gradle 分发:
gradle.project.settings.distribution.store.settings=将这些设置用于未来的项目
gradle.project.settings.distribution.version.invalid=无法解析 Gradle SDK 版本
gradle.project.settings.distribution.version.unsupported=Gradle {1} 不支持 JDK {0}
gradle.project.settings.distribution.wrapper=包装器
gradle.project.settings.distribution.wrapper.task=包装器任务
gradle.project.settings.distribution.wrapper.version=版本:
gradle.project.settings.distribution.wrapper.version.auto.select=自动选择
gradle.project.settings.distribution.wrapper.version.npw=Gradle 版本:
gradle.project.settings.kotlin.dsl.unsupported=Gradle {0} 不支持 Kotlin DSL
gradle.project.settings.kotlin.dsl.unsupported.message=Kotlin DSL 自 Gradle {0} 起已获得支持。\n\
\n\
是否要继续使用 Kotlin DSL 和 Gradle {1}?
gradle.project.settings.kotlin.dsl.unsupported.title=不受支持的 Gradle DSL
gradle.project.structure.jee.application=JEE 应用程序
gradle.project.structure.source.set=源集
gradle.project.structure.web.artifact=Web 工件
gradle.root.project=Gradle 根项目
gradle.run.configuration.command.line.argument.column=实参
gradle.run.configuration.command.line.arguments.empty.text=无 Gradle 实参
gradle.run.configuration.command.line.description.column=描述
gradle.run.configuration.command.line.empty.state=任务和实参
gradle.run.configuration.command.line.hint=示例: build --debug。如果未指定任何任务，则执行默认任务。
gradle.run.configuration.command.line.name=任务和实参(&R)
gradle.run.configuration.command.line.task.column=任务
gradle.run.configuration.command.line.tasks.empty.text=无 Gradle 任务
gradle.run.configuration.command.line.title=任务和实参
gradle.run.configuration.command.line.tooltip=插入任务和实参…
gradle.settings.composite.build.title=复合构建配置
gradle.settings.composite.select.all=全选
gradle.settings.composite.selector.description=请选择要包含在 Gradle 复合构建中的组成项目。
gradle.settings.composite.unselect.all=取消全选
gradle.settings.text.build.run=使用此工具构建和运行:
gradle.settings.text.build.run.hint=默认情况下，{0} 使用 Gradle 构建项目并运行任务。<br><br> 在纯 Java/Kotlin 项目中，由于进行了优化，通过 IDE 构建并运行的速度可能更快。请注意，IDE 并非支持所有 Gradle 插件，可能无法使用其中一些插件正确构建项目。
gradle.settings.text.build.run.per.test=根据测试选择:
gradle.settings.text.build.run.title=构建并运行
gradle.settings.text.default=默认
gradle.settings.text.download.annotations=下载依赖项的外部注解
gradle.settings.text.generate.iml.files=为从 Gradle 导入的模块生成 *.iml 文件
gradle.settings.text.generate.iml.files.hint=如果您有包含 {0} 模块和 Gradle 模块的混合项目，则启用此设置，以便通过 VCS 共享该项目
gradle.settings.text.home.path=Gradle 主目录:
gradle.settings.text.jvm.path=Gradle JVM:
gradle.settings.text.module.per.source.set=根据 Gradle 源集生成 {0} 模块
gradle.settings.text.module.per.source.set.hint=此设置已弃用，因为它不完全兼容 Gradle 的模型。<br>请考虑将其还原为默认设置(选中)
gradle.settings.text.run.tests=使用此工具运行测试:
gradle.settings.text.unexpected=意外: {0}
gradle.settings.text.user.home=Gradle 用户主目录:
gradle.settings.text.user.home.dialog.title=选择 Gradle 用户主目录
gradle.settings.text.user.home.hint=重写 Gradle 存储下载文件的默认位置，例如调整 Windows 中的防病毒软件
gradle.settings.text.user.home.not.found.error.text=找不到 Gradle 用户主目录
gradle.settings.text.vm.options=Gradle 虚拟机选项:
gradle.settings.text.vm.options.confirm.text=要将虚拟机选项移至 ''{0}'' 文件吗?\n\
请注意，现有的 ''org.gradle.jvmargs'' 属性将被覆盖。\n\
\n\
您可以稍后手动执行此操作
gradle.settings.text.vm.options.empty.text=虚拟机选项已移至 gradle.properties
gradle.settings.text.vm.options.link.text=迁移
gradle.settings.text.vm.options.link.tooltip=此设置已弃用，请改用 'gradle.properties' 文件中的 'org.gradle.jvmargs' 属性
gradle.settings.text.vm.options.migration.error.text={0}\n\
\n\
请手动迁移设置
gradle.settings.text.vm.options.migration.error.title=迁移错误
gradle.settings.title=Gradle
gradle.settings.wizard.add.as.module.to=作为模块添加至
gradle.settings.wizard.additional.libs=其他库和框架(&F):
gradle.settings.wizard.gradle.unsupported.message={0} 不支持早于 {1} 的版本。
gradle.settings.wizard.gradle.unsupported.title=不支持的 Gradle 版本
gradle.settings.wizard.java.unsupported.message={0} 不支持 Gradle 项目中早于 {1} 的 Java 版本。
gradle.settings.wizard.java.unsupported.title=不支持的 Java 版本
gradle.settings.wizard.unsupported.jdk.message=Gradle 支持 JDK 版本 {0} 至 {1}。\n\
\n\
是否要继续使用 JDK {2} 和 Gradle {3}?
gradle.settings.wizard.unsupported.jdk.title=不受支持的{0, choice, 0#项目|1#模块} JDK
gradle.settings.wizard.use.kotlin=Kotlin DSL 构建脚本
gradle.settings.wrapper.not.found=找不到 'gradle-wrapper.properties'
gradle.target.configurable.home.path.comment=目标上的 Gradle 安装的路径
gradle.target.configurable.home.path.label=Gradle 主路径:
gradle.target.configurable.home.path.title=Gradle 主路径
gradle.target.configure.label=Gradle 配置
gradle.target.execution.project.folder.description=项目源代码所在的目标路径
gradle.target.execution.project.folder.label=项目文件夹:
gradle.target.execution.project.folder.title=项目文件夹
gradle.target.execution.running=正在 {0} 上运行 Gradle…
gradle.target.run.label=运行 Gradle 任务
gradle.tasks.annotations.looking.for=正在查找 {0} 的注解
gradle.tasks.annotations.title=正在解析已知的外部注解
gradle.tasks.debugging.all=调试执行图上的所有 Gradle 任务
gradle.tasks.debugging.all.comment=调试标志已添加到 Gradle 执行图上的所有兼容任务。可能重新触发任务执行。
gradle.tasks.directory.completion.description=Gradle 源集
gradle.tasks.reattach.debug.process=在单独的调试选项卡中调试复刻的 Gradle 任务
gradle.tasks.reattach.debug.process.comment=一个 Gradle 调试会话用于所有任务。启用此选项以调试独立并行运行的任务。
gradle.tasks.script.debugging=调试 Gradle 脚本
gradle.tasks.tests.force=作为测试运行
gradle.tasks.tests.force.comment=显示测试视图并强制重新执行测试任务
gradle.tasks.toggle.offline.search.title=切换 Gradle 脱机模式
gradle.test.runner.build.tw.link.title=在“运行”工具窗口中查看测试视图
gradle.test.runner.ui.tests.actions.open.gradle.report.desc=打开测试任务生成的 Gradle 报告
gradle.test.runner.ui.tests.actions.open.gradle.report.text=打开 Gradle 测试报告
gradle.test.runner.ui.tests.tree.presentation.labels.no.tests.were.found=未收到测试事件
gradle.test.show.internal.nodes.action.name=显示内部 Gradle 测试套件
gradle.test.show.internal.nodes.action.text=显示内部 Gradle 测试套件，例如 'Gradle Test Executor N'
gradle.tests.pattern.producer.configuration.name={0} 和其他 {1} 个
gradle.tests.tasks.choosing.popup.hint=选择要同时运行的多个任务
gradle.tests.tasks.choosing.popup.title=运行 {0} 的任务
gradle.tests.tasks.choosing.popup.title.common=运行任务
gradle.tests.tasks.choosing.warning.text=无可用任务
gradle.title.gradle.settings=Gradle 设置
gradle.version.quick.fix.error=无法更新包装器文件
gradle.version.quick.fix.error.description=详细信息见 IDE 日志。\n\
<a href="#open_log">{0}</a>
notification.group.gradle=Gradle
popup.title.gradle.tasks=Gradle 任务
progress.title.build=正在构建
progress.title.build.model=正在构建模型
progress.title.configure.projects=正在配置项目
progress.title.download=下载中{0}
progress.title.run.tasks=正在运行任务
progress.title.run.tests=运行测试