border.title.docker.compose=docker-compose
configurable.gems.copy.mode.caption=选择将 Ruby 解释器和 gem 复制到本地缓存的方式:
configurable.gems.copy.mode.mixed=如果项目已启动，请使用正在运行的容器; 否则，请使用新容器
configurable.gems.copy.mode.run=始终使用新容器
configurable.internal.command.mode.caption=通过以下方式在 Docker 内与 Ruby 环境进行交互:
configurable.internal.command.mode.description=要进行分析，需要在 Docker 内部运行 'which ruby'、'gem env' 和 'rbconfig' 等命令
configurable.internal.command.mode.exec='docker-compose exec'，如果需要则使用 `docker-compose up` 运行项目
configurable.internal.command.mode.mixed=如果项目已启动，则运行 'docker-compose exec'，否则运行 'docker-compose run'
configurable.internal.command.mode.run='docker-compose run'
configurable.internal.command.mode.sdk.container='docker exec' 位于 SDK 容器中，请根据需要创建 SDK 容器
configurable.name=Ruby 设置
configurable.title.docker.compose=Docker Compose
dialog.message.command.docker.compose.up.failed=命令 'docker-compose up' 运行失败。查看 `docker logs` 了解详细信息
dialog.message.debug.cannot.proceed.without.rm.gems.volume=在未挂载辅助卷的情况下无法继续调试。请关闭(<code>docker compose down</code>)当前 compose 环境，然后重试。
dialog.message.down.docker.compose.failed=无法关闭 docker-compose
dialog.message.rm.gems.volume.missing=RubyMine 需要为正在运行的 compose 服务挂载一个特殊的辅助卷。\n\
RubyMine 将关闭(<code>docker compose down</code>)当前的 compose 环境。\n\
要继续吗?
dialog.message.up.docker.compose.failed=无法启动 docker-compose
ruby.docker.compose.command.type.exec.name=docker-compose exec
ruby.docker.compose.command.type.run.name=docker-compose run
ruby.docker.compose.command.type.up.name=docker-compose up
ruby.docker.compose.down.project=docker-compose down
ruby.docker.compose.sdk.bundle.install.quick.fix.title=运行 'docker-compose build'
ruby.docker.compose.sdk.precheck.message=正在检查 docker-compose 服务
ruby.docker.compose.up.project=docker-compose up
ruby.docker.no.execution.result=无法执行运行配置
ruby.docker.run.configuration.settings.pane.title=Docker
ruby.docker.sdk.bundle.install.quickfix.title=运行 'docker build .'
ruby.docker.sdk.cache.clearing=正在清除本地 gem 缓存目录: {0}
ruby.docker.sdk.downloading=正在下载: {0}
ruby.docker.volume.ownership.change.failed=无法更改 Docker 卷 ''{0}'' 的所有权。
ruby.docker.volume.remove.failed=无法移除 Docker 卷 ''{0}''。
ruby.docker.volume.setup.failed=无法设置 Docker 卷 ''{0}''。
ruby.sdk.bundle.install.and.docker.build.quick.display.name=在运行的容器中执行 'bundle install' 并重新构建 Docker 镜像
ruby.sdk.bundle.install.quick.display.name=重新构建 Docker 镜像