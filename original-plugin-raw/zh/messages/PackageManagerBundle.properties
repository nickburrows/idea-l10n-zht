cmake.auotreload.task.name=重新加载 CMake
cmake.hints.view.action.name=将软件包添加到 CMakeLists.txt
cmake.hints.view.window.hint=将此代码复制到您的 CMakeLists.txt 并在必要时更改目标
cmake.hints.view.window.name=将软件包添加到 CMakeLists.txt
cmake.hints.view.window.ok.button.name=复制到剪贴板
full.error.output.view.action.name=显示输出
full.error.output.view.window.name=输出
json.file.modificator.error.read.json=无法读取文件 {0}
json.file.modificator.read=读取 {0}
json.file.modificator.update=更新 {0}
json.file.modificator.write=写入 {0}
label.checking.correctness.package.manager=正在检查软件包管理器状态
label.error.when.checking.package.manager.make.sure.path.correct.cloned.repository.lies.there.that.it.was.bootstrap=检查软件包管理器时出错。\n请确保路径正确并检查仓库是否已成功引导。
manifest.manager.insert.to.vcpkg.configuration.json.action.name=将软件包添加到 {0}
manifest.manager.insert.to.vcpkg.json.action.name=将软件包添加到 {0}
manifest.manager.progress.title.modification.baseline.file=正在更新 {0}
manifest.manager.progress.title.modification.baseline.json=正在更新 {0}
manifest.manager.progress.title.vcpkg.json.modification=正在更新 {0}
manifest.manager.remove.from.vcpkg.configuration.json.action.name=删除 {0} 中的软件包用法
manifest.manager.remove.from.vcpkg.json.action.name=删除 {0} 中的软件包用法
manifest.manager.unable.to.create.file=无法创建文件: ${0}
manifest.manager.update.vcpkg.json=更新 vcpkg.json
progress.title.checking.for.install=正在查找 vcpkg
remove.package.manager.window.checkbox.delete.files=从磁盘中移除所有文件
remove.package.manager.window.name=删除 {0}
remove.package.manager.window.task.remove.from.disk=正在移除文件
remove.package.manager.window.want.to.remove=确定要删除 {0} 吗?
toolwindow.button.edit.package.manager.description=编辑 {0}
toolwindow.button.edit.package.manager.name=编辑 {0}
toolwindow.button.new.package.manager.button.name=添加新的软件包管理器
toolwindow.button.new.package.manager.description=添加新的软件包管理器
toolwindow.button.new.package.manager.name=添加 {0}
toolwindow.console.placeholder=[{0} 行]
toolwindow.install.multiple.window.label.choose.one=选择要安装的软件包
toolwindow.install.multiply.window.name=安装软件包
toolwindow.install.multiply.window.notification.broken.package.manager=安装过程中出错\n{0} 不可用
toolwindow.install.multiply.window.notification.can't.find.package.manager=找不到 Vcpkg。请确保它已在 Vcpkg 工具窗口中配置
toolwindow.install.multiply.window.task.find.packages=正在查找软件包
toolwindow.left.panel.linked.to=已链接到 {1} 个中的 {0} 个
toolwindow.left.panel.linked.to.single=已链接到 "{0}"
toolwindow.left.panel.tooltip=已链接到: {0}
toolwindow.name.console=控制台: {0}
toolwindow.name.vcpkg=软件包
toolwindow.not.selected.package.manager=未选择软件包管理器。\n请选择软件包管理器
toolwindow.notification.key=软件包管理器通知
toolwindow.problem.cmake.description=找不到软件包 {0}
toolwindow.problem.cpp.description=找不到文件 {0}
toolwindow.problem.do.not.show.this.button.name=不再建议
toolwindow.problem.do.not.show.this.button.notification=建议已被禁用。要启用，请转到 Vcpkg 工具窗口，然后在“设置”菜单中选择相应的选项
toolwindow.problem.notification.profile.cant.find.package.manager=工具链参数路径上没有软件包管理器
toolwindow.problem.notification.profile.cant.found.toolchain=没有指定工具链参数路径
toolwindow.problem.problem.name=修正…
toolwindow.problem.solve.by.installing.another.package.manager.install.new.description={0}\n改用 vcpkg ''{1}''
toolwindow.problem.solve.by.installing.another.package.manager.install.new.name=安装新的 ''{0}''
toolwindow.problem.solve.by.installing.many.packages.description={0}\n安装下面其中一项: {1}
toolwindow.problem.solve.by.installing.many.packages.name=显示候选项
toolwindow.problem.solve.by.installing.one.package.description={0}\n安装 ''{1}''
toolwindow.problem.solve.by.installing.one.package.name=安装 ''{0}''
toolwindow.problem.solve.by.use.another.package.manager.description={0}\n改用 vcpkg ''{1}''
toolwindow.problem.solve.by.use.another.package.manager.name=使用 vcpkg“{0}”
vcpkg.add.new.package.manager.field.local.path=目录:
vcpkg.add.new.package.manager.field.local.path.name.window=选择安装目录
vcpkg.add.new.package.manager.field.name=名称:
vcpkg.add.new.package.manager.field.url=URL:
vcpkg.add.new.package.manager.name.must.be.not.blank=名称不得为空
vcpkg.add.new.package.manager.name.must.be.unique=名称必须唯一
vcpkg.add.new.package.manager.name.of.triselect=将 vcpkg 集成添加到现有 CMake 配置文件
vcpkg.add.new.package.manager.path.already.exists=目录 {0} 已存在。它的内容将被视为软件包管理器。
vcpkg.add.new.package.manager.path.must.be.correct=路径必须正确
vcpkg.add.new.package.manager.path.must.be.not.blank=安装目录不能为空
vcpkg.add.new.package.manager.path.show.dialog=将在 {0} 中创建软件包管理器
vcpkg.add.new.package.manager.rename.package.manager=名称为 ''{0}'' 的 vcpkg 被重命名为 ''{1}''
vcpkg.add.new.package.manager.table.profile.already.enabled=(使用 ''{0}'')
vcpkg.add.new.package.manager.url.must.be.valid=URL 必须有效
vcpkg.add.new.package.manager.window.name=添加 Vcpkg
vcpkg.edit.package.manager.advanced.settings=高级设置
vcpkg.edit.package.manager.force.cmake.ninja.sources.description=设置 VCPKG_FORCE_SYSTEM_BINARIES 变量并将 CMake 和 Ninja 添加到 PATH
vcpkg.edit.package.manager.force.cmake.ninja.sources.name=使用系统二进制文件
vcpkg.edit.package.manager.window.name=编辑 Vcpkg
vcpkg.indicator.task.label.install.package=正在安装 ''{0}''
vcpkg.indicator.task.label.installed.find=正在查找已安装的软件包
vcpkg.indicator.task.label.remove.package=正在移除 ''{0}''
vcpkg.indicator.task.label.search.package=正在查找软件包
vcpkg.name=vcpkg
vcpkg.name.plural=vcpkg 仓库
vcpkg.registry.add.new.package.manager.field.local.path=目录:
vcpkg.registry.add.new.package.manager.field.name=名称:
vcpkg.registry.add.new.package.manager.window.name=新建 Vcpkg 注册表
vcpkg.registry.adding.package.wizard.create.files.background.task=为软件包创建文件
vcpkg.registry.adding.package.wizard.window.name=Vcpkg 注册表新软件包
vcpkg.registry.adding.packages.create.new.package.loading.packages=正在加载软件包
vcpkg.registry.adding.packages.step.dependencies.actions.add.package.description=将此软件包添加到依赖项
vcpkg.registry.adding.packages.step.dependencies.actions.add.package.name=添加到依赖项
vcpkg.registry.adding.packages.step.dependencies.actions.remove.package.description=从依赖项中移除此软件包
vcpkg.registry.adding.packages.step.dependencies.actions.remove.package.name=从依赖项中移除
vcpkg.registry.adding.packages.step.main.package.already.exists=存在名称为 {0}、版本为 {1} 的软件包
vcpkg.registry.adding.packages.step.main.package.name=名称:
vcpkg.registry.adding.packages.step.main.package.name.comment=在搜索、安装和卸载软件包时将使用此名称
vcpkg.registry.adding.packages.step.main.package.name.must.be.not.empty=名称不能为空
vcpkg.registry.adding.packages.step.main.package.version=版本:
vcpkg.registry.adding.packages.step.portfile.creating.bitbucket.data.name=BitBucket
vcpkg.registry.adding.packages.step.portfile.creating.bitbucket.data.ref.description=一个不会改变内容的稳定 git commit-ish (理想情况下是一个标签)。这不应该是一个分支。对于没有正式发布的仓库，这可以设置为当前最新 master 的完整提交 ID。如果指定了 REF，则还必须指定 SHA512。
vcpkg.registry.adding.packages.step.portfile.creating.bitbucket.data.ref.name=Ref
vcpkg.registry.adding.packages.step.portfile.creating.bitbucket.data.rep.description=BitBucket 上的组织或用户和仓库。示例: Microsoft/cpprestsdk
vcpkg.registry.adding.packages.step.portfile.creating.bitbucket.data.rep.name=仓库
vcpkg.registry.adding.packages.step.portfile.creating.cmakelists.must.exists=CMakeLists.txt 必须存在
vcpkg.registry.adding.packages.step.portfile.creating.directory.must.exists=目录必须存在
vcpkg.registry.adding.packages.step.portfile.creating.git.data.ref.description=要下载的提交的 git sha
vcpkg.registry.adding.packages.step.portfile.creating.git.data.ref.name=Ref
vcpkg.registry.adding.packages.step.portfile.creating.git.data.url.description=Git 仓库的 URL
vcpkg.registry.adding.packages.step.portfile.creating.github.data.name=Github
vcpkg.registry.adding.packages.step.portfile.creating.github.data.repo.description=GitHub 上的组织或用户和仓库。示例: Microsoft/cpprestsdk
vcpkg.registry.adding.packages.step.portfile.creating.github.data.repo.name=仓库
vcpkg.registry.adding.packages.step.portfile.creating.gitlab.data.name=Gitlab
vcpkg.registry.adding.packages.step.portfile.creating.gitlab.data.repo.description=组织或用户加 Gitlab 实例上的仓库名称。示例: gitlab-org/gitlab-ce
vcpkg.registry.adding.packages.step.portfile.creating.gitlab.data.repo.name=仓库
vcpkg.registry.adding.packages.step.portfile.creating.gitlab.data.url.description=要使用的 Gitlab 实例的 URL
vcpkg.registry.adding.packages.step.portfile.creating.sha512.description=应与来自数据的归档匹配的 SHA512 哈希。最容易的确定方式为: 首先将其设置为 0，然后尝试构建端口。错误消息将包含完整的哈希值，可以将其复制回端口文件。
vcpkg.registry.adding.packages.step.portfile.creating.sha512.validation=该字段可以为零(以使其正确)或正确的 SHA-512
vcpkg.registry.adding.packages.step.portfile.creating.source.data.name=源
vcpkg.registry.adding.packages.step.portfile.creating.source.data.source.path.description=该目录的内容将在安装过程中被复制。在项目的根中有一个 CMakeLists.txt 文件非常重要。同样重要的是，如果目录不可用，安装也将不可用
vcpkg.registry.adding.packages.step.portfile.creating.source.data.source.path.name=源目录
vcpkg.registry.adding.packages.step.portfile.creating.sourceforge.data.filename.description=文件的本地名称。文件在端口之间共享，因此文件可能需要重命名以使其明确归属于此端口并避免冲突
vcpkg.registry.adding.packages.step.portfile.creating.sourceforge.data.filename.name=文件名
vcpkg.registry.adding.packages.step.portfile.creating.sourceforge.data.name=SourceForge
vcpkg.registry.adding.packages.step.portfile.creating.sourceforge.data.repo.description=SourceForge 上的组织或用户和仓库。示例: cunit/CUnit
vcpkg.registry.adding.packages.step.portfile.creating.sourceforge.data.repo.name=仓库
vcpkg.registry.adding.packages.step.portfile.creating.url.data.url.description=正确的 URL
vcpkg.registry.adding.packages.step.portfile.creating.url.data.url.name=URL
vcpkg.registry.adding.packages.step.portfile.creating.url.data.url.validation=应为有效的 URL
vcpkg.registry.configurator.task.name=正在更新“{0}”
vcpkg.registry.edit.package.manager.failed.not.installed.package.manager.notification=无法查找注册表
vcpkg.registry.edit.package.manager.loading.text=正在加载转换…
vcpkg.registry.edit.package.manager.no.packages.to.add.more=更多…
vcpkg.registry.edit.package.manager.no.packages.to.add.text=没有要添加的软件包
vcpkg.registry.edit.package.manager.old.registry.get=旧版本
vcpkg.registry.edit.package.manager.old.registry.is.add=添加到当前项目
vcpkg.registry.edit.package.manager.old.registry.name=旧注册表版本
vcpkg.registry.edit.package.manager.row.name=软件包名称
vcpkg.registry.edit.package.manager.row.version.name=版本
vcpkg.registry.edit.package.manager.table.add.to.registry=添加到注册表
vcpkg.registry.edit.package.manager.table.name=软件包名称
vcpkg.registry.edit.package.manager.table.version=版本
vcpkg.registry.edit.package.manager.version.name.already.exists=名称为“{0}”的基线已存在
vcpkg.registry.edit.package.manager.window.name=编辑 Vcpkg 注册表
vcpkg.registry.registry.info.create.file=创建 {0}
vcpkg.registry.registry.info.create.file.progress.bar=创建 {0}
vcpkg.registry.registry.info.delete=删除注册表
vcpkg.registry.registry.info.edit.add.version=添加新版本
vcpkg.registry.registry.info.edit.name=编辑注册表名称
vcpkg.registry.registry.info.edit.select.old.version=选择旧版本
vcpkg.registry.registry.info.loading.file.progress.bar=正在加载文件
vcpkg.registry.registry.info.loading.file.status=正在加载…
vcpkg.registry.registry.info.open.file=打开 {0}
vcpkg.registry.registry.info.registry.not.initialized=正在初始化注册表…
vcpkg.registry.task.check.for.install.failed=无法安装注册表
vcpkg.registry.task.check.for.install.package.manager.failed.ioexception=无法创建或访问目录
vcpkg.registry.task.check.for.install.package.manager.failed.securityexception=无法访问文件
vcpkg.registry.task.get.baseline.failed.get.ports=获取端口时出错
vcpkg.registry.task.get.baseline.failed.get.registry=获取注册表时出错
vcpkg.registry.task.get.baseline.name=获取基线
vcpkg.registry.task.install.package.manager=正在安装 Vcpkg 注册表
vcpkg.registry.task.install.package.manager.failed=注册表创建失败
vcpkg.registry.task.install.package.manager.failed.ioexception=无法创建或访问目录
vcpkg.registry.task.install.package.manager.failed.streamwrite=无法创建或访问 JSON 文件
vcpkg.registry.task.install.package.manager.successful=已成功创建注册表
vcpkg.regsitry.adding.packages.step.portfile.creating.git.data.name=Git
vcpkg.return.status.exit.code.is=Vcpkg 失败，退出代码为 {0}
vcpkg.return.status.failed.parse.result=无法解析 vcpkg 命令
vcpkg.return.status.process.failed=无法运行 vcpkg。找不到可执行文件 vcpkg
vcpkg.scheme.name=架构: Vcpkg
vcpkg.table.column.name=名称
vcpkg.table.column.version=版本
vcpkg.toolwindow.button.add.registry.description=添加新的个人仓库
vcpkg.toolwindow.button.add.registry.name=添加注册表
vcpkg.toolwindow.button.auto.reload.cmake.after.install.description=安装软件包后自动重新加载 CMake
vcpkg.toolwindow.button.auto.reload.cmake.after.install.name=安装软件包后重新加载 CMake
vcpkg.toolwindow.button.check.for.update.description=检查 Git 仓库更新
vcpkg.toolwindow.button.check.for.update.name=检查更新
vcpkg.toolwindow.button.console.check.error.description=在控制台输出中提供快速修复
vcpkg.toolwindow.button.console.check.error.name=在输出视图中显示快速修复
vcpkg.toolwindow.button.install.package.name=安装
vcpkg.toolwindow.button.pull.and.update.description=更新 Git 仓库并更新 vcpkg
vcpkg.toolwindow.button.pull.and.update.name=全部更新
vcpkg.toolwindow.button.remove.package.name=删除软件包
vcpkg.toolwindow.button.remove.repository.description=删除仓库
vcpkg.toolwindow.button.remove.repository.name=删除仓库
vcpkg.toolwindow.button.repository.on.start.update.description=软件包管理器将在 IDE 启动时自动更新
vcpkg.toolwindow.button.repository.on.start.update.name=IDE 启动时自动更新仓库
vcpkg.toolwindow.button.settings.description=软件包管理器的设置
vcpkg.toolwindow.button.settings.name=设置
vcpkg.toolwindow.button.show.console.description=使用 vcpkg 输出显示控制台
vcpkg.toolwindow.button.show.console.name=显示控制台
vcpkg.toolwindow.button.update.git.repository.description=将 Git 仓库更新到最新版本
vcpkg.toolwindow.button.update.git.repository.name=更新 Vcpkg 仓库
vcpkg.toolwindow.button.update.repository.description=检查当前版本的 vcpkg 是否可以从当前版本的 Git 仓库更新任何已安装的软件包。\n注意: 这并不能保证您获得最新版本的软件包，因为您还需要更新 Git 仓库才能进行完整更新
vcpkg.toolwindow.button.update.repository.name=更新仓库
vcpkg.toolwindow.button.upgrade.all.description=更新 Git 仓库并升级 vcpkg
vcpkg.toolwindow.button.upgrade.all.name=全部升级
vcpkg.toolwindow.button.upgrade.repository.description=重新构建所有过时的软件包
vcpkg.toolwindow.button.upgrade.repository.name=升级仓库
vcpkg.toolwindow.button.vcpkg.json.auto.update.description=在软件包安装、更新或移除时自动更新 vcpkg.json。
vcpkg.toolwindow.button.vcpkg.json.auto.update.name=vcpkg.json 自动更改
vcpkg.toolwindow.mode.classic=经典
vcpkg.toolwindow.mode.manifest=清单
vcpkg.toolwindow.package.info.nothing.has.done=什么都没做
vcpkg.toolwindow.package.info.too.much.packages=中断软件包安装可能会使仓库处于无法使用的状态。所选的软件包数量可能需要很长时间才能完成安装。
vcpkg.toolwindow.package.info.vcpkg.json.install=添加到 vcpkg.json
vcpkg.toolwindow.package.info.vcpkg.json.loading=正在加载…
vcpkg.toolwindow.package.info.vcpkg.json.loading.task.name=加载 vcpkg.json
vcpkg.toolwindow.package.info.vcpkg.json.remove=从 vcpkg.json 中移除
vcpkg.toolwindow.package.info.vcpkg.json.switch.to.manifest.mode=切换到清单模式
vcpkg.toolwindow.package.not.selected=选择软件包以查看信息。
vcpkg.toolwindow.package.triplet.action.remove.tooltip=删除软件包
vcpkg.toolwindow.package.triplet.action.upgrade.tooltip=升级软件包
vcpkg.toolwindow.package.triplet.installed.triplets=已安装的三元组:
vcpkg.toolwindow.package.triplet.lets.cmake.decide=让 vcpkg 决定
vcpkg.toolwindow.package.triplet.manifest.mode=清单模式
vcpkg.toolwindow.package.triplet.name=三元组:
vcpkg.toolwindow.package.triplet.name.and.version={0} ({1})
vcpkg.toolwindow.package.triplet.no.triplets.found=未安装软件包
vcpkg.toolwindow.table.model.name.with.count=(找到 {0} 个)
vcpkg.toolwindow.table.splitter.all=所有
vcpkg.toolwindow.table.splitter.installed.classic=已安装 | 经典模式
vcpkg.toolwindow.table.splitter.installed.manifest=已添加 | 清单模式
vcpkg.toolwindow.table.warning.not.updated=软件包可以更新({0} -> {1})
vcpkg.toolwindow.table.warning.not.updated.no.version=<无版本>
vcpkg.toolwindow.task.bootstrap.failed=引导失败。原因:\n{0}
vcpkg.toolwindow.task.bootstrap.vcpkg=正在引导 vcpkg
vcpkg.toolwindow.task.check.for.update.failed=检查更新失败。原因:\n{0}
vcpkg.toolwindow.task.check.for.update.label=正在检查更新
vcpkg.toolwindow.task.check.for.update.successful.can.be.updated=仓库可以更新
vcpkg.toolwindow.task.check.for.update.successful.updated=仓库已更新
vcpkg.toolwindow.task.clone.and.bootstrap.successful=克隆和引导成功
vcpkg.toolwindow.task.git.clone.failed=Git 克隆失败。原因:\n{0}
vcpkg.toolwindow.task.git.update.and.vcpkg.update=正在更新 Git 和 vcpkg
vcpkg.toolwindow.task.git.update.and.vcpkg.update.failed.git=Git 拉取失败。原因: {0}
vcpkg.toolwindow.task.git.update.and.vcpkg.update.failed.vcpkg=vcpkg 更新失败。原因: {0}
vcpkg.toolwindow.task.git.update.and.vcpkg.update.successful=Git 拉取和 vcpkg 更新成功。过时的软件包:\n{0}
vcpkg.toolwindow.task.git.update.and.vcpkg.upgrade=Git 拉取和 vcpkg 升级
vcpkg.toolwindow.task.git.update.and.vcpkg.upgrade.failed.git=Git 拉取失败。原因: {0}
vcpkg.toolwindow.task.git.update.and.vcpkg.upgrade.failed.vcpkg=vcpkg 升级失败。原因: {0}
vcpkg.toolwindow.task.git.update.and.vcpkg.upgrade.successful=Git 拉取和 vcpkg 更新成功。已更新的软件包:\n{0}
vcpkg.toolwindow.task.git.update.and.vcpkg.upgrade.successful.no.packages=Git 拉取和 vcpkg 升级成功，没有要更新的软件包
vcpkg.toolwindow.task.install.failed=安装失败。原因:\n{0}
vcpkg.toolwindow.task.install.successful.top=安装成功。已安装的软件包:\n{0}
vcpkg.toolwindow.task.install.vcpkg=安装 vcpkg
vcpkg.toolwindow.task.installed.failed=已安装内容搜索失败。原因:\n{0}
vcpkg.toolwindow.task.installed.successful=已成功加载的已安装软件包列表
vcpkg.toolwindow.task.query.failed=搜索失败。原因:\n{0}
vcpkg.toolwindow.task.remove.failed=移除失败。原因:\n{0}
vcpkg.toolwindow.task.remove.successful.no.packages=没有要移除的软件包
vcpkg.toolwindow.task.remove.successful.top=移除成功。已移除的软件包:\n{0}
vcpkg.toolwindow.task.start.package.manager=正在启动软件包管理器
vcpkg.toolwindow.task.start.package.manager.failed=无法启动软件包管理器
vcpkg.toolwindow.task.successful.more=和 {0} 个其他软件包
vcpkg.toolwindow.task.update.failed=更新失败。原因:\n{0}
vcpkg.toolwindow.task.update.git.repository=正在更新 Git 仓库
vcpkg.toolwindow.task.update.git.repository.failed=更新 Git 仓库失败。原因:\n{0}
vcpkg.toolwindow.task.update.git.repository.successful=Git 仓库更新成功
vcpkg.toolwindow.task.update.packages=正在更新软件包
vcpkg.toolwindow.task.update.successful=更新成功。软件包可以更新:\n{0}
vcpkg.toolwindow.task.update.successful.no.packages=没有要更新的软件包
vcpkg.toolwindow.task.upgrade.failed=升级失败。原因:\n{0}
vcpkg.toolwindow.task.upgrade.packages=正在升级软件包
vcpkg.toolwindow.task.upgrade.successful=更新成功。已更新的软件包:\n{0}
vcpkg.toolwindow.task.upgrade.successful.no.packages=没有要升级的软件包
wait.until.install.package.manager=正在安装软件包管理器…