action.description.load.script.configurations=Gradle Kotlin DSL 脚本配置已更改。加载更改以获取代码洞察，无需导入外部 Gradle 项目。
action.text.install=安装
action.text.load.script.configurations=加载脚本配置
action.text.show.kotlin.gradle.dsl.logs.in=在 {0} 中显示 Kotlin Gradle DSL 日志
build.0.project=内部版本号 {0}
change.build.gradle.configuration=更改 build.gradle 配置
command.name.configure.0=配置 {0}
command.name.configure.kotlin=配置 Kotlin
configuration.apply.is.resolve.module.per.source.set=修正并重新导入项目
configuration.do.not.suggest.update.is.resolve.module.per.source.set=不再显示
configuration.is.resolve.module.per.source.set=检测到传统 Gradle 导入模式
configuration.update.is.resolve.module.per.source.set=IDE 当前配置为每个 Gradle 项目创建一个模块。这种模式与 Kotlin Multiplatform 项目不兼容，后者要求每个 Gradle 源集都只有一个模块。
description.text.a.single.platform.kotlin.library.or.application.targeting.javascript=面向 JavaScript 的单平台 Kotlin 库或应用程序
description.text.a.single.platform.kotlin.library.or.application.targeting.js.for.browser=面向 JavaScript 或浏览器的单平台 Kotlin 库或应用程序
description.text.a.single.platform.kotlin.library.or.application.targeting.js.for.node.js=面向 JavaScript 或 Node.js 的单平台 Kotlin 库或应用程序
description.text.a.single.platform.kotlin.library.or.application.targeting.the.jvm=面向 JVM 的单平台 Kotlin 库或应用程序
description.text.adds.support.for.building.kotlin.projects=添加对构建 Kotlin 项目的支持
description.text.multi.targeted.jvm.js.ios.etc.project.with.shared.code.in.common.modules=具有通用模块中共享代码的多目标 (JVM、JS、iOS 等) 项目。可以在项目的构建脚本中配置这些目标。
display.name.kotlin.js.for.browser=Kotlin/JS (适用于浏览器)
display.name.kotlin.js.for.node.js=Kotlin/JS (适用于 Node.js)
display.name.kotlin.jvm=Kotlin/JVM
display.name.kotlin.multiplatform=Kotlin/Multiplatform
error.text.cannot.find.build.gradle.file.for.module=找不到模块 {0} 的 build.gradle 文件
error.text.failed.to.load.script.definitions.by=无法通过 {0} 加载脚本定义
error.text.highlighting.is.impossible.during.gradle.import=在 Gradle 导入期间，无法突出显示
error.text.invalid.gradle.libraries.directory=Gradle 库目录 {0} 无效
error.text.missing.jars.in.gradle.directory=Gradle 目录中缺少 jar
error.text.support.requires.version={0}支持需要 {1} 或更高版本的 Kotlin 运行时库。请更新构建脚本中的版本。
error.text.this.language.feature.requires.version=此语言功能需要 {0} 或更高版本的 Kotlin 运行时库。请更新构建脚本中的版本。
error.text.unable.to.get.gradle.home.directory=无法获取 Gradle 主目录
framework.support.provider.kotlin.js.for.browser.display.name=Kotlin/JS (适用于浏览器)
framework.support.provider.kotlin.js.for.node.js.display.name=Kotlin/JS (适用于 Node.js)
framework.support.provider.kotlin.jvm.display.name=Kotlin/JVM
gradle.script.configurations.importing.feature=在 Gradle 项目导入期间加载 Gradle Kotlin DSL 脚本配置
gradle.scripts.settings.title=Gradle Kotlin DSL 脚本
kotlin.build.script.errors=Kotlin 构建脚本错误
notification.gradle.legacy.firstLoad=禁用代码洞察以避免 Gradle 构建配置。
notification.gradle.legacy.firstLoad.info=<div width=400><p>需要运行 Gradle 配置阶段才可获取脚本配置。脚本配置加载默认禁用，因为其对于大型 Gradle 项目可能会占用大量资源。</p><p>点击“加载配置”评估 Gradle Kotlin DSL 脚本。</p><p>或者，要在脚本首次打开时自动加载配置，并在每次更改构建脚本配置块时重新加载配置，可以为所有脚本启用“自动重新加载”。对于配置时间较长的大型 Gradle 项目，不推荐此选项。</p></div>
notification.gradle.legacy.outsideProject=代码洞察不可用(相关 Gradle 项目未链接)。
notification.gradle.legacy.outsideProject.addToStandaloneHelp=<div width=400><p>需要导入评估此脚本的 Gradle 项目，使 IDE 能够进行分析。尝试重新导入链接的 Gradle 项目或链接评估该脚本的新 Gradle 项目。</p><p>或者，您可以将其添加到独立脚本中，其配置将自动加载。</p><p><b>注意: </b>每个独立脚本都需要在更新时执行单独的 Gradle 配置阶段。对于大型 Gradle 项目，这可能会占用大量资源。</p></div>
notification.gradle.legacy.standalone.info=<div width=400><p>评估此脚本的 Gradle 项目未在 IDE 中导入。<br/><p><b>注意: </b>每个独立脚本都需要在更新时执行单独的 Gradle 配置阶段。对于大型 Gradle 项目，这可能会占用大量资源。</p></div>
notification.notEvaluatedInLastImport.addAsStandaloneAction=添加到独立脚本
notification.notEvaluatedInLastImport.info=<div width=400><p>需要导入评估此脚本的 Gradle 项目，使 IDE 能够进行分析。尝试重新导入链接的 Gradle 项目或链接评估该脚本的新 Gradle 项目。</p><p>或者，您可以将其添加到独立脚本中，其配置将单独加载。</p><p><b>注意: </b>每个独立脚本都需要在更新时执行单独的 Gradle 配置阶段。对于大型 Gradle 项目，这可能会占用大量资源。</p></div>
notification.notEvaluatedInLastImport.text=代码洞察不可用(未收到脚本配置)。
notification.outsideAnything.linkAction=链接 Gradle 项目
notification.outsideAnything.text=代码洞察不可用(相关 Gradle 项目未链接)。
notification.standalone.disableScriptAction=从独立脚本移除
notification.standalone.info=<div width=400><p>此脚本的配置将与 Gradle 项目同步分别加载。<br/><p><b>注意:</b> 每个独立脚本都需要在更新时执行单独的 Gradle 配置阶段。对于大型 Gradle 项目，这可能会占用大量资源。</p></div>
notification.standalone.text=独立脚本
notification.text.script.configuration.has.been.changed=需要导入 Gradle Project 以加载更改。
notification.wasNotImportedAfterCreation.help=<div width=400><p>Gradle Kotlin DSL 脚本配置丢失。导入外部 Gradle 项目或加载配置以获取脚本代码洞察。</p></div>
notification.wasNotImportedAfterCreation.text=代码洞察不可用(未加载脚本配置)。
presentable.text.java.with.gradle=Java 与 Gradle
standalone.scripts.settings.column.name=路径
standalone.scripts.settings.title=管理独立脚本
text.couldn.t.configure.kotlin.gradle.plugin.automatically=无法自动配置 kotlin-gradle 插件。
text.default.kotlin.gradle.script=默认 Kotlin Gradle 脚本
text.gradle.dsl.logs.cannot.be.found.automatically.see.how.to.find.logs=无法自动找到 Gradle DSL 日志。<br/>可以在<a href="{0}">此处</a>了解如何查找日志。
text.see.manual.installation.instructions=要查看手动安装说明，请点击<a href="https://kotlinlang.org/docs/reference/using-gradle.html">此处</a>。
text.was.modified={0} 已被修改
title.configure.kotlin.gradle.plugin=配置 Kotlin-Gradle 插件
title.kotlin.build.script=Gradle Kotlin DSL 脚本错误
title.update.language.version=更新语言版本
you.can.delegate.to.gradle=您可以在“文件 | 设置 | 构建、执行、部署 | 构建工具 | Gradle | 使用此工具构建和运行”中将 IDE 构建/运行操作委托给 Gradle