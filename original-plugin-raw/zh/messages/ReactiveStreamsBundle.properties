inspections.blocking.in.non.blocking.add.publishOn.quickfix.text=添加带有 ''{1}'' 实参的 ''{0}'' 以切换到阻塞上下文
inspections.blocking.in.non.blocking.quickfix.alternative.text=非阻塞作用域，因为 {0} 使用 {1}
inspections.blocking.in.non.blocking.quickfix.name=查找原因
inspections.blocking.in.non.blocking.quickfix.text=非阻塞作用域，因为在 {0} 上进行了调度
inspections.debug.initialization.name=不必要的调试初始化
inspections.group.name=通用
inspections.group.name.mutiny=Mutiny
inspections.group.name.reactor=Reactor
inspections.monovoid.mono.with.map.transformation=在 Mono<Void> 类型的接收器上调用转换函数
inspections.monovoid.mono.with.zip.transformation=Zip 包含 Mono<Void> 类型的形参
inspections.nullchecking.null.in.lambda.description=在转换方法中从 lambda 返回 null 或可为 null 的内容
inspections.nullchecking.null.in.lambda.name=在转换方法中从 lambda 返回 null 或可为 null 的内容
inspections.publisher.implementation.name=类实现发布者
inspections.publisher.problem.callable.reference.description=可调用引用表达式实现发布器
inspections.publisher.problem.description=类实现发布者
inspections.publisher.problem.lambda.description=Lambda 表达式实现发布器
inspections.subscribe.in.non.blocking.scope.name=在 "reactive" 方法中调用 'subscribe'
inspections.subscriber.implementation.name=类实现订阅者
inspections.subscriber.problem.description=类实现订阅者
inspections.subscription.in.reactive.scope.text=不建议在非阻塞上下文中调用 'subscribe'
inspections.throw.in.operator.description=Throw 语句位于 {0} {1} {2} 中
inspections.throw.in.operator.name=Throw 语句位于 Reactive 运算符中
inspections.too.long.map.chain.description={0} 链过长。可能导致性能开销
inspections.too.long.map.chain.name=相同方法链过长
inspections.too.long.map.chain.settings.field=允许的最长相同方法链长度
inspections.unfinished.step.verifier.name=未完成的 StepVerifier
inspections.unused.publisher.description=值从未被用作发布者
inspections.unused.publisher.name=未使用的发布者
intention.collapse.category.key=Reactor/将相同运算符调用收起为一个调用
intention.collapse.filter.with.previous.name=通过上一个筛选器收起
intention.collapse.map.with.previous.name=通过上一个映射收起
intention.replace.all.throw.statements.quickfix.name=将 lambda 中的所有 throw 替换为 {0}
intention.replace.throw.statement.quickfix.name=将 throw 替换为 {0}
notification.group.reactor.loud=已启用 Reactor 调试模式
notification.group.reactor.silent=Reactor 调试模式失败
notifications.agent.impossible.message.pattern=由于 {1}，无法将 ReactorDebugAgent 与 <b>{0}</b> 配置搭配使用
notifications.classpath.error=ReactorDebugAgent 不在类路径中
notifications.first.debug.action.text=配置…
notifications.first.debug.message=是否要配置调试模式初始化方法?
notifications.first.debug.title=已启用 Reactor 调试模式
notifications.title=Reactor 调试模式
notifications.version.error=Reactor 版本低于 3.3.0
postfix.template.condition.non.void.name=reactor
setting.advanced.non.blocking.analysis=使用高级分析检测非阻塞作用域
setting.advanced.non.blocking.analysis.description=搜索并处理 subscribeOn() 和 publishOn() 运算符
setting.display.name=Reactive Streams
setting.inspections.configuration.title=检查配置
settings.debugger.chunk.size=一次提取的 Flux 元素的最大数量:
settings.debugger.panel.title=调试器
settings.debugger.timeout=超时后停止 Mono/Flux 评估:
settings.debugger.timeout.suffix=秒
settings.initialization.method.agent=ReactorDebugAgent.init()
settings.initialization.method.agent.comment=仅当 io.projectreactor:reactor-tools 位于类路径中且 Reactor 版本为 3.3.0 或更高版本时才有效
settings.initialization.method.agent.link=https://projectreactor.io/docs/core/release/reference/#reactor-tools-debug
settings.initialization.method.agent.problem.notification=无法调用 ReactorDebugAgent.init() 时通知
settings.initialization.method.details=更多详细信息
settings.initialization.method.hooks=Hooks.onOperatorDebug()
settings.initialization.method.hooks.link=https://projectreactor.io/docs/core/release/reference/#debug-activate
settings.initialization.method.label=调试方法初始化方法:
settings.initialization.method.none=无
settings.is.getter.renderer.enabled.field=将 Mono/Flux 实例呈现为延迟计算值
settings.is.stack.frame.customization.enabled.field=启用 Reactor 调试模式