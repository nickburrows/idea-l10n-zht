class.action.handler.action.title=生成 {0}
class.action.handler.invalid.for.selection=操作对当前选择无效
class.action.handler.no.members.message={0} 没有要{1}的成员
declare.action.context.implementation=实现(不声明)
declare.action.context.interface=接口
declare.action.context.private.category=私有类别
declare.members.handler.action.title=声明成员
declare.members.handler.members.chooser.title=选择要声明的成员
declare.members.handler.no.members.message={0} 没有要声明的成员
generate.constructor.action.title=生成构造函数
generate.constructor.already.defined.message=构造函数 {0} 已经被定义。\n是否要继续?
generate.constructor.choose.base.class.constructor=选择基类构造函数
generate.constructor.members.chooser.title=选择要初始化的字段
generate.cpp.getter.action.title=生成 getter
generate.cpp.getter.and.setter.action.title=生成 getter 和 setter
generate.cpp.getter.and.setter.members.chooser.title=选择要{0}的字段
generate.cpp.handler.add.missing.button=添加缺失(&A)
generate.cpp.handler.inplace.option=就地生成(&P)
generate.cpp.handler.no.parents.message=没有要{0}的类
generate.cpp.handler.parent.chooser.title=选择目标位置
generate.cpp.handler.replace.button=替换现有(&R)
generate.cpp.handler.show.existing.button=显示现有(&S)
generate.cpp.handler.usages.cannot.make=无法完成生成: 部分文件已更改
generate.cpp.handler.usages.string=匹配项
generate.cpp.setter.action.title=生成 setter
generate.definitions.handler.parent.chooser.title=选择类/命名空间
generate.description.handler.action.title=生成 {0}
generate.description.handler.include.member.names=包含成员名称(&I)
generate.destructor.action.title=生成析构函数
generate.destructor.already.defined.message=析构函数已定义。\n是否要继续?
generate.encode.handler.action.title=生成 {0}/{1}
generate.encode.handler.no.members.message={0} 没有可编码成员
generate.initwith.handler.action.title=生成 {0}
generate.initwith.handler.generate.class.constructor=生成“+objectWith…”(&G)
generate.initwith.handler.members.chooser.title=选择要初始化的成员
generate.initwith.handler.retain.objects=保留对象形参(&R)
generate.initwith.handler.use.setters=使用属性 setter(&U)
generate.isequal.and.hash.handler.action.title=生成 {0} 和 {1}
generate.ivars.handler.action.title=从属性生成实例变量
generate.ivars.handler.members.chooser.title=选择属性以创建实例变量
generate.ivars.handler.no.members.message={0} 没有用于生成实例变量的属性
generate.ivars.handler.show.synthesized=显示合成属性(&S)
generate.method.handler.declare.in.interface=在接口中声明(&D)
generate.method.handler.members.chooser.title=选择成员
generate.method.handler.method.already.defined={0} 已经定义。\n是否要替换现有方法?
generate.properties.handler.action.title=从实例变量生成属性
generate.properties.handler.convert.usages=将 ivar 用法转换为属性(&C)
generate.properties.handler.members.chooser.title=选择实例变量以创建属性
generate.properties.handler.no.instance.variables={0} 没有用于生成属性的实例变量
generate.properties.handler.show.synthesized=显示具有合成属性的 ivarsy(&I)
generate.shared.instance.handler.action.title=生成共享实例方法
implement.methods.handler.members.chooser.title=选择要实现的方法
implement.methods.handler.no.members.message={0} 没有要实现的方法
override.implement.action.context.ivar.not.available.when.overridden={0,choice,1#属性|2#属性}{1} 已使用实例{0,choice,1#变量|2#变量}，但当{0,choice,1#它的|2#他们的}访问器被重写时将无法使用。是否要继续?
override.implement.methods.handler.action.title=重写/实现方法
override.implement.methods.handler.members.chooser.title=选择要重写/实现的方法
override.implement.methods.handler.no.members.message={0} 没有要重写/实现的方法
override.implement.show.optional.members=显示可选成员(&O)
override.implement.show.synthesized.accessors=显示合成访问器(&S)