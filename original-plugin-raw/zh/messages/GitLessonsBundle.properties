git.annotate.add.shortcut.tip=<strong>提示</strong>: 您可以为{0}操作分配快捷键。点击此链接 {1} 并选择 {2}。
git.annotate.choose.annotate=选择“{0}”选项以显示此文件的历史记录。
git.annotate.choose.show.diff=选择“{0}”选项以显示此提交中的更改内容。
git.annotate.click.annotation=点击高亮显示的注解以预览此提交的相关信息。
git.annotate.click.annotation.tooltip=右键点击注解
git.annotate.click.gutter.balloon=右键点击装订区域
git.annotate.close.all.windows=接下来关闭{0,choice,0#所有打开的窗口|1#所有打开的编辑器标签页}以返回编辑器。按两次 {1}。
git.annotate.close.annotations=现在，您可以关闭注解。
git.annotate.close.by.shortcut=按 {0}。
git.annotate.close.changes=就我们看到的高亮显示的提交消息而言，这个奇怪的值 {0} 并非错误。因此，在浏览了此文件的诸多历史记录之后，您可以关闭打开的工具窗口。按 {1}。
git.annotate.feature.explanation=“{0}”操作让您可以轻松访问修改文件中特定行的上次提交。您可以看到 {1} 是最后修改此行的人。右键点击高亮显示的注解以打开上下文菜单。
git.annotate.found.needed.commit=太棒了! 我们找到了 {0} 值发生变化的地方。让我们最后对它进行注解以调查该更改的原因。
git.annotate.go.deeper=您可以注意到 {0} 的值显示在此提交之前。因此，我们来更深入地查看历史记录!
git.annotate.help.link=定位代码作者(使用 Git 追溯注解)
git.annotate.introduction=查看高亮显示的属性。属性值暗示一只猫有四个耳朵。此更改的原因耐人寻味。我们可以使用{0}功能调查文件的历史记录。
git.annotate.invoke.manually=右键点击高亮显示的区域并从菜单中选择“{0}”。
git.annotate.invoke.manually.2=右键点击高亮显示的区域并从菜单中选择“{0}”选项。
git.annotate.invoke.shortcut.1=按 {0} 显示此文件的历史记录。
git.annotate.invoke.shortcut.2=将文本光标移至左侧编辑器并再次按 {0}。
git.annotate.invoke.shortcut.3=将文本光标移至右侧编辑器并按 {0}。
git.annotate.lesson.name=使用 Git 追溯注解
git.annotate.open.context.menu=右键点击高亮显示的左侧装订区域以打开上下文菜单。
git.annotate.show.diff=右键点击高亮显示的注解以打开上下文菜单并选择“{0}”。
git.changelists.shelf.choose.new.changelist=点击“{0}”并选择“{1}”菜单项。
git.changelists.shelf.click.changelist.tooltip=右键点击 {0} 更改列表
git.changelists.shelf.click.line.marker.balloon=点击行标记
git.changelists.shelf.congratulations=恭喜! 现在，您已经知道如何管理更改列表和搁置更改了。
git.changelists.shelf.create.changelist=为新的更改列表 {0} 命名。按 {1} 或点击“{2}”以创建一个新的更改列表。
git.changelists.shelf.explanation=此外，您还可以使用{0}功能将这些更改保存到您的计算机上的文件中。{0} 中存储的更改可以稍后应用到任何分支。这样可以帮助您避免丢失这些更改。
git.changelists.shelf.help.link=使用 Git 可以同时处理多个功能
git.changelists.shelf.introduction=假设您不想提交某些更改。例如，某些注释仅适用于本地。您可以将注释移动到新的更改列表，这样它就不会被意外提交。点击高亮显示的行标记可打开上下文菜单。
git.changelists.shelf.lesson.name=更改列表和搁置
git.changelists.shelf.open.commit.window=现在，我们来检查创建的更改列表。
git.changelists.shelf.open.context.menu=我们来搁置更改。右键点击高亮显示的更改列表以打开上下文菜单。
git.changelists.shelf.open.shelf.dialog=选择 {0} 以打开“{1}”对话框。
git.changelists.shelf.open.unshelve.dialog=您的更改存储到 {0} 中后，您可以重新应用它们。选择高亮显示的更改列表并按 {1} 以打开<strong>取消搁置</strong>对话框。
git.changelists.shelf.performed.explanation=您可以注意到更改列表已成功保存到 {0} 中，并且注释已消失。
git.changelists.shelf.performed.got.it=可以注意到，更改列表已成功保存到 {0}
git.changelists.shelf.remove.changelist=您不再需要此更改列表: 请点击“{0}”将其舍弃。
git.changelists.shelf.shelve.changelist=现在，您可以编辑消息或保持不变。点击 {0} 以将更改存储在 {1} 中。
git.changelists.shelf.unshelve.changelist=现在，您可以编辑更改列表的名称以纳入取消搁置的更改或保持不变。点击“{0}”以应用更改。
git.click.balloon=点击 {0}
git.click.to.change.settings=或者，<callback id="{0}">点击</callback>以更改设置。
git.click.to.open=点击以打开 {0}
git.commit.amend.commit=点击“{0}”按钮编辑上次提交。
git.commit.amend.commit.balloon=点击以最终编辑上次提交
git.commit.analyze.code.explanation=使用 {0} 获得在要提交的文件中发现的警告和错误的通知。在本课中，您可以保持此选项不变。
git.commit.choose.files=“{0}”工具窗口有助于以不同方式对提交进行自定义。假设您希望 {1} 成为提交的一部分。点击复选框可以将其包括在内。
git.commit.choose.files.balloon=选择高亮显示的文件可以将其包括到提交中
git.commit.close.commit.options=选择必要选项后，关闭提交选项弹出窗口。按 {0}。
git.commit.committed.file.explanation=“{0}”工具窗口的右侧窗格显示上次提交更改的文件。
git.commit.committed.file.got.it=此处显示由上次提交更改的文件
git.commit.enable.reformat.code=选择“{0}”可以在应用提交之前自动修正格式设置。
git.commit.help.link=提交更改并将其推送到 Git 仓库
git.commit.lesson.name=提交
git.commit.open.before.commit.options=现在，编辑提交选项。按 {0} 打开“Git 选项”弹出窗口。
git.commit.open.commit.window=假设您修改了项目中的某些文件，并希望将其提交到当前分支。
git.commit.open.git.window=太棒了! 按 {0} 或点击“{1}”条纹按钮打开“{2}”工具窗口并在树中找到您的提交。
git.commit.open.options.tooltip=点击以打开“{0}”选项
git.commit.perform.commit=现在，编辑提交消息或者按建议保持不变。然后，点击“{0}”按钮执行提交。
git.commit.select.amend.checkbox=如果您忘记将一些更改添加到最后执行的提交，该怎么办? 最好的方式是使用“{0}”功能编辑上次提交。按 {1} 或选择“{2}”工具窗口中的“{0}”复选框。
git.commit.select.amend.checkbox.balloon=选择“{0}”复选框以开始编辑上次提交
git.commit.select.file=选择高亮显示的文件可以将其添加到提交中。
git.commit.select.file.balloon=选择文件可以将其添加到提交中
git.commit.select.top.commit=选择树中的顶层提交以查看它的更多详细信息。
git.commit.select.top.commit.again=再次选择“{0}”工具窗口中的顶层提交可以查看所修正提交的相关信息。
git.commit.select.top.commit.again.balloon=再次选择顶层提交可以预览更改
git.commit.select.top.commit.balloon=选择提交可以查看有关它的更多详细信息。
git.commit.two.committed.files.explanation=现在，您可以看到目标提交包含两个更改的文件。
git.feature.branch.checkout.and.rebase=选择 {0} 分支并选择 {1}。
git.feature.branch.checkout.branch=选择 {0} 分支并从菜单中选择“{1}”。
git.feature.branch.choose.force.push=您不能只推送更改，因为远程 {0} 分支与更新的本地分支冲突。使用 {1}。按“{2}”按钮附近高亮显示的箭头以打开列表并选择 {1}。
git.feature.branch.confirm.force.push=再次点击“{0}”以确认操作。
git.feature.branch.confirm.update=点击“{0}”确认更新。
git.feature.branch.force.push.tip=<strong>提示</strong>: 如果您不是该分支的唯一用户，请勿使用 {0}。否则，您同事的提交可能会丢失。
git.feature.branch.help.link=管理 Git 分支
git.feature.branch.introduction.1=假设您已完成 {0} 分支上的工作，并将更改推送到远程，以便后续将其与 {1} 分支合并。按 {2} 打开“{3}”工具窗口并预览项目历史记录。
git.feature.branch.introduction.2=但是，在您处理功能时，您的同事也可能将其更改推送到 {0} 分支。
git.feature.branch.introduction.check=我们来检查一下 {0} 中的可能更改是否与您的更改不冲突。
git.feature.branch.introduction.got.it=这些是您的 {0} 分支的新提交。
git.feature.branch.lesson.name=功能分支工作流
git.feature.branch.new.commits.explanation=您可以注意到 {0} 分支中的一些更改。
git.feature.branch.new.commits.got.it={0} 分支中有新提交
git.feature.branch.open.branches.popup.1=首先，签出 {0} 分支。按 {1} 或点击高亮显示的区域以打开“{2}”。
git.feature.branch.open.branches.popup.2=因此，您应该将提交放在来自 {0} 分支的新提交之后。您可以使用“{1}”功能执行此操作。按 {2} 或点击高亮显示的区域可再次打开“{3}”。
git.feature.branch.open.push.dialog=更新 {0} 分支后，还应当在远程仓库中进行更新。按 {1} 打开 {2} 对话框。
git.feature.branch.open.update.dialog=现在，更新 {0} 分支以纳入远程仓库中的潜在更改。按 {1} 打开 {2} 对话框。
git.interactive.rebase.apply.reword=默认情况下，所有被压缩提交的消息都已包含到生成的消息中。不过，在本单元中，将消息替换为类似于 {0} 的内容。如果需要，可以编辑消息并按 {1} 以应用改写。
git.interactive.rebase.choose.interactive.rebase=选择列表中的 {0}。
git.interactive.rebase.click.commit.tooltip=右键点击高亮显示的提交
git.interactive.rebase.congratulations=恭喜! 您已清理项目的历史记录!
git.interactive.rebase.help.link=通过执行交互式变基来编辑项目历史记录
git.interactive.rebase.introduction=查看高亮显示的提交序列，一般很难确定已经发生变化的内容。如果您可以对一些提交进行重新排序或压缩，就会更容易。
git.interactive.rebase.invoke.fixup=按 {0} 或点击高亮显示的按钮，从列表中选择 {1}，将此提交中的更改添加到最顶端的提交中。
git.interactive.rebase.invoke.squash=按 {0} 或点击“{1}”按钮以组合提交。
git.interactive.rebase.lesson.name=互动式变基
git.interactive.rebase.move.commit=现在，将此提交向上移至高亮显示的区域。拖放提交或按三次 {0}。
git.interactive.rebase.open.context.menu=使用<strong>互动式变基</strong>可以解决此任务。右键点击高亮显示的提交以打开上下文菜单。
git.interactive.rebase.open.git.window=假设您已对项目进行一些修正。按 {0} 可以打开“{1}”工具窗口并预览项目历史记录。
git.interactive.rebase.select.one.commit=似乎高亮显示的提交修正了列表中最顶端提交中的一些内容。如果将两个提交组合，那就太棒了。请选择高亮显示的提交。
git.interactive.rebase.select.three.commits=太棒了! 三个高亮显示的提交看起来大致相同了，您可以将其组合成一个并编辑生成的消息。点击提交并按 {0}，选择高亮显示的提交。
git.interactive.rebase.start.rebasing=最后，点击“{0}”。
git.module.description=学习如何在 IDE 中使用 Git 集成
git.module.name=Git
git.not.use.staging.area.warning=您需要禁用<strong>暂存区域</strong>才能完成本课。按 {0}，转到“{1} <strong>→</strong> {2}”，然后取消选择“{3}”。
git.open.tool.window=按 {0} 或点击“{1}”条纹按钮打开“{2}”工具窗口。
git.open.tool.window.balloon=点击以打开“{0}”工具窗口
git.project.history.apply.branch.filter=您的仓库的所有分支都列出在工具窗口的左侧窗格中。{0,choice,0#点击|1#双击} <strong>HEAD</strong> 分支仅显示来自有效分支的提交。
git.project.history.apply.message.filter=高亮显示的搜索字段可以帮助您通过其消息或哈希查找提交。假设您希望通过其消息的一部分查找提交。例如，在高亮显示的字段中输入 {0} 并按 {1}。
git.project.history.apply.user.filter=您可以使用多个筛选器来帮助您发现提交。例如，您可以预览特定作者的提交。点击高亮显示的筛选器以打开用户列表。
git.project.history.click.changed.file=还有一个包含此提交中更改的所有文件的树。双击高亮显示的文件以预览其更改。
git.project.history.click.changed.file.popup=双击高亮显示的文件可以预览其更改
git.project.history.click.filter.tooltip=点击以打开用户列表
git.project.history.click.head.tooltip={0,choice,0#点击|1#双击} <strong>HEAD</strong> 以仅显示有效分支中的提交
git.project.history.close.diff=预览更改后关闭差异窗口。按 {0}。
git.project.history.commit.details.explanation=工具窗口的右侧窗格显示所选提交的相关信息: 一些元数据以及包含此提交的分支。
git.project.history.commit.details.got.it=此处显示详细提交元数据和包含此提交的分支
git.project.history.commits.tree.explanation=提交树位于工具窗口的中心。您可以看到有效分支的上次提交被高亮显示。请注意，高亮显示的提交下方的所有提交也来自此分支，它们使用不同的颜色标识。剩余提交位于其他分支中。
git.project.history.commits.tree.got.it=这是您有效分支的上次提交
git.project.history.invitation.to.commit.lesson=太棒了! 我们将在下一课中探索如何创建提交。
git.project.history.lesson.name=项目历史记录
git.project.history.open.git.window=按 {0} 或点击“{1}”条纹按钮打开“{2}”工具窗口，并在一个可视化时间线中预览所有已执行的提交。
git.project.history.select.commit=选择高亮显示的提交以获取它的相关信息。
git.project.history.select.me=从列表中选择 {0} 以仅显示您的提交。
git.quick.start.choose.new.branch.item=从列表中选择 {0}。
git.quick.start.clone.dialog.got.it.1=您可以使用仓库 URL 将仓库克隆到指定目录
git.quick.start.clone.dialog.got.it.2=此外，您还可以直接登录热门托管服务，然后从那里浏览和克隆仓库
git.quick.start.close.clone.dialog=但是，我们已经为本课准备了一个沙盒仓库。您可以关闭此对话框。
git.quick.start.commit.window.select.file=在这里您可以选择要提交的文件。点击复选框以将文件添加到提交中。
git.quick.start.find.action=您可以使用{0}操作克隆现有的 Git 仓库。按两次 {1} 打开“{2}”弹出窗口。
git.quick.start.help.link=设置 Git 仓库
git.quick.start.introduction=在本课中，您将学习如何克隆现有项目并使用 Git 集成的 IDE 功能执行基本的版本控制工作流。
git.quick.start.lesson.name=快速入门
git.quick.start.modify.file=在新分支中，您可以对文件进行更改，IDE 将检测这些更改。例如，我们在打开的文件中修改猫眼的颜色。将 {0} 替换为其他颜色。
git.quick.start.name.new.branch=输入新分支的任意名称。然后按 {0} 或点击“{1}”。
git.quick.start.open.branches=很好! 接下来，我们将使用 IDE 的集成来研究一下如何执行一些基本的 Git 工作流。例如，可以是: <strong>签出新分支 → 进行更改并提交 → 推送</strong>。首先，按 {0} 或者点击高亮显示的当前分支以打开分支列表。
git.quick.start.open.commit.window=现在，您可以提交更改的文件。
git.quick.start.open.push.dialog=执行提交后，您可以将其推送到远程仓库。按 {0} 打开“{1}”对话框。
git.quick.start.open.vcs.widget=首先，按 {0} 或点击高亮显示的区域以打开“{1}”。
git.quick.start.perform.commit=在高亮显示的区域中输入提交消息。例如，可以是 {0}。然后，点击“{1}”。
git.quick.start.perform.push=现在，点击“{0}”。您的提交将被推送到在您计算机上创建的仓库用作教程。
git.quick.start.type.clone=在搜索字段中键入 {0} 并选择高亮显示的选项。
git.quick.start.workflow.explanation=很好! 接下来，我们将使用 IDE 的集成来研究一下如何执行一些基本的 Git 工作流。例如，可以是: <strong>签出新分支 → 进行更改并提交 → 推送</strong>。
git.use.non.modal.commit.ui.warning=您需要启用非模式提交界面才能完成本课。按 {0}，转到“{1} <strong>→</strong> {2}”，然后选择“{3}”。
git.window.closed.warning=按 {0} 再次打开“{1}”工具窗口。