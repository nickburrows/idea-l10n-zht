inspection.jvm.languages.group.name=JVM 語言
jvm.inspections.sql.source.to.sink.flow.display.name=不安全字串被用作 SQL
jvm.inspections.sql.source.to.sink.flow.too.complex=太複雜，無法檢查 SQL 中使用的字串是否安全
jvm.inspections.sql.source.to.sink.flow.unsafe=在 SQL 中使用的字串可能不安全
jvm.inspections.sql.source.unsafe.to.sink.flow.check.private.final.field = 將同一類別中的 private 或 final 欄位視為安全欄位
jvm.inspections.sql.source.unsafe.to.sink.flow.check.private.final.field.comment = 如果啟用，則 private 或 final 欄位被認為是安全的，否則將根據規則進行處理
jvm.inspections.sql.source.unsafe.to.sink.flow.check.private.methods=將 private 方法的參數視為安全
jvm.inspections.sql.source.unsafe.to.sink.flow.check.private.methods.comment = If disabled, parameters of private methods will be considered as unknown
jvm.inspections.sql.source.unsafe.to.sink.flow.check.warn.if.complex=Report strings that are too complex to verify
jvm.inspections.sql.source.unsafe.to.sink.flow.check.warn.if.complex.comment = It can be useful to check such strings manually
jvm.inspections.sql.source.unsafe.to.sink.flow.safe.class=安全類別:
jvm.inspections.sql.source.unsafe.to.sink.flow.safe.class.comment=These classes are considered to contain only safe data
jvm.inspections.sql.source.unsafe.to.sink.flow.untainted.annotations=Untainted 註解:
jvm.inspections.sql.source.unsafe.to.sink.flow.untainted.annotations.comment=These annotations will be used as '@Untainted' annotations during the analysis
jvm.inspections.sql.source.unsafe.to.sink.flow.untainted.methods=Untainted 方法:
jvm.inspections.sql.source.unsafe.to.sink.flow.untainted.methods.comment=These methods are considered to return only safe objects